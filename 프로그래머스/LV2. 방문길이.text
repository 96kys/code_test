#include <string>
#include <vector>

using namespace std;

// 상 하 우 좌
int dr[4] = {-1, 1, 0, 0};
int dc[4] = {0, 0, 1, -1};
int answer = 0;
int row = 5;
int col = 5;   
int do_dir = -1;
int n_do_dir = -1;
vector<vector<int>> matrix(11,vector <int>(11,1));

bool check_out(){    
    if(row + dr[do_dir] < 0 || row + dr[do_dir] > 10 || col + dc[do_dir] < 0 || col + dc[do_dir] > 10){
        return false;
    }

    return true;
}

int solution(string dirs) {

    vector<vector<vector<int>>> check_matrix(11,vector <vector<int>>(11,vector<int>(4,1)));
    for(int i = 0;i<dirs.size();i++){        
        if(dirs[i] == 'U'){
            do_dir = 0;
        }
        else if(dirs[i] == 'D'){
             do_dir = 1;
        }
        else if(dirs[i] == 'R'){
             do_dir = 2;
        }
        else if(dirs[i] == 'L'){
             do_dir = 3;
        } 
        
        // 이동하였을 때 맵밖인 경우 해당 명령어 무시 다음 명령 시행
        if(!check_out()){
            continue;
        }        
        
        int nr = row + dr[do_dir];
        int nc = col + dc[do_dir];
        
        if(do_dir % 2 == 0){            
            n_do_dir = do_dir + 1;
        }
        else{
            n_do_dir = do_dir - 1;
        }
       
        
        if(check_matrix[row][col][do_dir] == 1 && check_matrix[nr][nc][n_do_dir] == 1){
          answer++;
        }
        check_matrix[row][col][do_dir] = 0;
        check_matrix[nr][nc][n_do_dir] = 0;
        row = nr;
        col = nc;
    }
    
    return answer;
}