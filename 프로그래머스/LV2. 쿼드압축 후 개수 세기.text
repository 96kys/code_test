#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>


int cnt[2] = {0, };

void sol_fun(int** arr, int start_row, int end_row, int start_col, int end_col){
    
    // 배열내 0과 1의 수를 저장하기 위한 변수 선언
    int zero_cnt = 0;
    int one_cnt = 0;
    
    // 이차원 배열 크기 및 가로 및 세로 축 사이즈를 저장하기 위한 변수 선언
    int square_size = (end_row - start_row) * (end_col - start_col);
    int row_size = end_row - start_row;
    int col_size = end_col - start_col;        
            
    
    // start -> end 까지 순차적 searching 하면서 해당 범위 내에 0과 1의 갯수 저장
    for(int i = start_row;i<end_row;i++){
        for(int j = start_col;j<end_col;j++){
            
            if(arr[i][j] == 1){
                one_cnt++;
            }
            else{
                zero_cnt++;
            }
            
        }        
    }

    // 범위 내의 1 또는 0의 갯수가 배열 크기와 같다면 전부 동일한 수로 이루어 졌다 판단함.
    if(one_cnt == square_size){// 모든 수가 1로 되어있으니 1값 ++
        cnt[1]++;
    }
    else if(zero_cnt == square_size){// 모든 수가 0으로 되어있으니 0값 ++
        cnt[0]++;
    }
    else{// 모든수가 동일한 수로 안되어있는경우 더 작게 쪼개야하기 때문에 현재 함수를 재귀형태로 실행
        // 4가지 형태로 조각내어 함수를 시행한다.
        sol_fun(arr, start_row, start_row + (row_size/2), start_col, start_col + (col_size/2));//좌상단
        sol_fun(arr, start_row, start_row + (row_size/2), start_col + (col_size/2), end_col);//우상단
        sol_fun(arr, start_row + (row_size/2), end_row, start_col, start_col + (col_size/2));//좌하단
        sol_fun(arr, start_row + (row_size/2), end_row, start_col + (col_size/2), end_col);//우하단            
    }    
}



// arr_rows는 2차원 배열 arr의 행 길이, arr_cols는 2차원 배열 arr의 열 길이입니다.
int* solution(int** arr, size_t arr_rows, size_t arr_cols) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int* answer = (int*)malloc(sizeof(int) * 2);
    
    // 배열시작과 끝을 입력하는 변수 선언
    int start_row = 0;
    int start_col = 0;
    int end_row = arr_rows;
    int end_col = arr_cols;        
    
    // sol fun 실행
    sol_fun(arr, start_row, end_row, start_col, end_col);
    
    // cnt 저장된 값 answer에 저장
    answer[0] = cnt[0];
    answer[1] = cnt[1];
    
    return answer;
}
