#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <queue>

using namespace std;


vector<int> hospital_index;
vector<int> answer_buffer;
int answer = -1;
int various_cnt = 0;

void Dfs(vector<vector<int>>& matrix, const vector<pair<int, int>>& hospital_location, vector<bool>& selected, int m, int cnt, int start);
void Bfs(vector<vector<int>>& matrix, const vector<pair<int, int>>& hospital_location, int m);

void Dfs(vector<vector<int>>& matrix, const vector<pair<int, int>>& hospital_location, vector<bool>& selected, int m, int cnt, int start) {

	// Select hospital
	if (cnt == m) {
		for (int i = 0; i < hospital_index.size(); i++) {
			vector<vector<int>> temp_matrix = matrix;
			Bfs(temp_matrix, hospital_location, m);
		}
		return;
	}


	for (int i = start; i < hospital_location.size(); i++) {
		if (!selected[i]) {
			selected[i] = true;
			hospital_index.push_back(i);
			Dfs(matrix, hospital_location, selected, m, cnt + 1, i + 1);
			selected[i] = false;
			hospital_index.pop_back();
		}
	}

}


void Bfs(vector<vector<int>>& matrix, const vector<pair<int, int>>& hospital_location, int m) {

	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };

	int map_size = matrix.size();
	queue<pair<int, int>> q;
	queue<pair<int, int>> temp;

	for (int i = 0; i < m; i++) {
		q.push(hospital_location[hospital_index[i]]);
	}
	// 단계 단계를 알려주는 변수
	int step = 2;


	int temp_various_cnt = various_cnt;


	while (1) {

		while (!temp.empty()) {
			q.push(temp.front());
			temp.pop();
		}
		step++;

		while (!q.empty()) {			
			int row = q.front().first;
			int col = q.front().second;
			q.pop();

			for (int dir = 0; dir < 4; dir++) {
				int nr = row + dr[dir];
				int nc = col + dc[dir];

				if (nr >= 0 && nc >= 0 && nr < map_size && nc < map_size && (matrix[nr][nc] == 0 || matrix[nr][nc] == 2)) {
					if (matrix[nr][nc] == 0) {
						temp_various_cnt--;
					}
					matrix[nr][nc] = step;
					temp.push({ nr, nc });
				}
			}
		}

		if (temp.empty() || temp_various_cnt == 0) {
			break;
		}

	}


	for (int i = 0; i < matrix.size(); i++) {
		for (int j = 0; j < matrix.size(); j++) {
			if (matrix[i][j] == 0) {
				answer = -1;
				break;
			}
			else {
				answer = max(answer, matrix[i][j]);
			}
		}
		if (answer == -1) {
			break;
		}
	}


	if (answer != -1) {
		answer_buffer.push_back(answer - 2);
	}
	answer = 0;

}




int main() {
	int n, m;

	cin >> n >> m;

	vector<vector<int>> matrix(n, vector<int>(n, 0));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> matrix[i][j];
			if (matrix[i][j] == 0) {
				various_cnt++;
			}
		}
	}

	vector<pair<int, int>> hospital_location;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (matrix[i][j] == 2) {
				hospital_location.push_back({ i,j });
			}
		}
	}
	vector<bool> selected(hospital_location.size(), false);


	Dfs(matrix, hospital_location, selected, m, 0, 0);



	if (various_cnt == 0) {
		cout << 0;
	}
	else if (answer_buffer.size() > 0) {
		sort(answer_buffer.begin(), answer_buffer.end());
		cout << answer_buffer[0];
	}
	else {
		cout << -1;
	}


	return 0;
}