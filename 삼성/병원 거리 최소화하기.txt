#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int min_distance = INT_MAX;

int cal_distance(int row, int col, int nrow, int ncol) {
	int answer = 0;
	answer = abs(row - nrow) + abs(col - ncol);

	return answer;
}

void dfs(vector<pair<int, int>>& hospital, vector<pair<int, int>>& human, int m, int start, vector<int>& selected) {
	if (selected.size() == m) {
		// m개의 병원이 모두 선택되었을 때, 각 사람들의 최소 거리를 계산
		int sum = 0;
		for (auto& h : human) {
			int min_dist = INT_MAX;
			for (int idx : selected) {
				min_dist = min(min_dist, cal_distance(h.first, h.second, hospital[idx].first, hospital[idx].second));
			}
			sum += min_dist;
		}
		min_distance = min(min_distance, sum);
		return;
	}

	for (int i = start; i < hospital.size(); i++) {
		selected.push_back(i);
		dfs(hospital, human, m, i + 1, selected);
		selected.pop_back();
	}
}

int main() {
	int n, m;

	cin >> n >> m;

	vector<vector<int>> matrix(n, vector<int>(n, 0));
	vector<pair<int, int>> hospital;
	vector<pair<int, int>> human;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> matrix[i][j];
			if (matrix[i][j] == 2) {
				hospital.push_back({ i, j });
			}
			else if (matrix[i][j] == 1) {
				human.push_back({ i, j });
			}
		}
	}

	/*
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cout << matrix[i][j] << " ";

		}
		cout << endl;
	}


	cout << endl;

	for (int i = 0; i < hospital.size(); i++) {
		cout << "병원 위치:  " << hospital[i].first << "  " << hospital[i].second << endl;
	}

	cout << endl;

	for (int i = 0; i < hospital.size(); i++) {
		cout << "사람 위치:  " << human[i].first << "  " << human[i].second << endl;
	}
	*/

	vector<int> visit;

	dfs(hospital, human, m, 0, visit);
	cout << min_distance;

	return 0;
}