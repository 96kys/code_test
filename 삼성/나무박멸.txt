#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <queue>

using namespace std;

int answer = 0;



void tree_grow(vector<vector<int>>& matrix, vector<pair<int, int>>& tree_location) {
	tree_location.clear();
	// 상 우 하 좌
	int dr[4] = {-1, 0, 1, 0};
	int dc[4] = {0, 1, 0, -1};


	for (int i = 0; i < matrix.size(); i++) {
		for (int j = 0; j < matrix.size(); j++) {
			if (matrix[i][j] > 0) {
				// 해당 위치 나무가 있는 경우
				tree_location.push_back({ i,j });
				for (int dir = 0; dir < 4; dir++) {
					// 인접한 상 우 하 좌 에 나무가 있는지 확인
					int nr = i + dr[dir];
					int nc = j + dc[dir];

					if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] > 0) {
						// 나무가 있는 경우 나무 성장
						matrix[i][j]++;
					}
				}
			}
		}
	}
}


void tree_spred(vector<vector<int>>& matrix, vector<pair<int, int>>& tree_location, vector<vector<pair<bool, int>>>& erased_place) {

	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };

	vector<vector<int>> temp_matrix(matrix.size(), vector<int>(matrix.size(), 0));

	for (int i = 0; i < tree_location.size(); i++) {
		int row = tree_location[i].first;
		int col = tree_location[i].second;

		int empty_cnt = 0;

		for(int dir = 0; dir < 4; dir++) {
			int nr = row + dr[dir];
			int nc = col + dc[dir];

			if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] == 0 && erased_place[nr][nc].first) {
				empty_cnt++;
			}
		}

		for (int dir = 0; dir < 4; dir++) {
			int nr = row + dr[dir];
			int nc = col + dc[dir];

			if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] == 0 && erased_place[nr][nc].first) {
				temp_matrix[nr][nc] += matrix[row][col] / empty_cnt;
			}
		}
	}	


	for (int i = 0; i < matrix.size(); i++) {
		for (int j = 0; j < matrix.size(); j++) {
			matrix[i][j] += temp_matrix[i][j];
		}
	}



}


int find_max_erase(vector<vector<int>>& matrix, int r, int c, int k) {
	// (r, c) 좌표에 제초제가 뿌려진 경우  해당 좌표에 없어지는 나무 확인
	int answer = 0;

	// 해당 좌표에 나무가 없는 경우에 대해 예외처리
	if (matrix[r][c] <= 0) {
		answer = 0;
		return answer;
	}

	// 우상 우하 좌하 좌상
	int dr[4] = {-1, 1, 1, -1};
	int dc[4] = {1, 1, -1, -1};
	int sum = matrix[r][c];

	int row = r;
	int col = c;

	for (int dir = 0; dir < 4; dir++) {
		for (int step = 1; step <= k; step++) {
			int nr = row + dr[dir] * step;
			int nc = col + dc[dir] * step;

			if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] > 0) {
				sum += matrix[nr][nc];
			}
			else if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] <= 0) {
				break;
			}
		}
	}
	answer = sum;

	return answer;
}


void tree_erase(vector<vector<int>>& matrix, int r, int c, int k, int time, vector<vector<pair<bool, int>>>& erased_place) {

	// 우상 우하 좌하 좌상
	int dr[4] = { -1, 1, 1, -1 };
	int dc[4] = { 1, 1, -1, -1 };

	int row = r;
	int col = c;

	matrix[row][col] = 0;
	erased_place[row][col] = {false, time};

	for (int dir = 0; dir < 4; dir++) {
		for (int step = 1; step <= k; step++) {
			int nr = row + dr[dir] * step;
			int nc = col + dc[dir] * step;

			if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] > 0) {
				//cout << "nr:  " << nr << "   nc: " << nc << endl;
				matrix[nr][nc] = 0;
				erased_place[nr][nc] = { false, time };
			}
			else if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix.size() && matrix[nr][nc] <= 0) {
				erased_place[nr][nc] = { false, time };
				//cout << "erase !!!   " << "nr:  " << nr << "   nc: " << nc << endl;
				break;
			}
		}
	}
}


int main() {

	int n, m, k, c;
	cin >> n >> m >> k >> c;

	vector<vector<int>> matrix(n, vector<int>(n, 0));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> matrix[i][j];
		}
	}



	vector<pair<int, int>> tree_location;
	int max_value = 0;
	pair<int, int> max_value_index = { 0, 0 };
	int answer = 0;
	// 잡초제가 남아있는지 없는지 확인하는 것.
	// bool -> true: 잡조체 영향이 없는 경우	false: 잡초제가 남아있는 경우
	// 잡초제 영향 남은 기간.
	vector<vector<pair<bool,int>>> erased_place(n, vector<pair<bool, int>>(n, {true, 0}));

	for (int i = 0; i < m; i++) {
		max_value = 0;
		tree_grow(matrix, tree_location);
		tree_spred(matrix, tree_location, erased_place);



		for (int row = n-1; row >= 0; row--) {
			for (int col = n-1; col >= 0; col--) {
				int temp;
				temp = find_max_erase(matrix, row, col, k);
				if (temp >= max_value) {
					max_value = temp;
					max_value_index = { row, col };
				}
			}
		}

		for (int row = 0; row < n; row++) {
			for (int col = 0; col < n; col++) {
				if (erased_place[row][col].second > 0) {
					erased_place[row][col].second--;
					if (erased_place[row][col].second == 0) {
						erased_place[row][col].first = true;
					}
				}
			}
		}

		answer += max_value;
		tree_erase(matrix, max_value_index.first, max_value_index.second, k, c, erased_place);
		
	}


	cout << answer;

	return 0;
}
