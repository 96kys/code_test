#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>

using namespace std;


int max_value = 0;

void dfs(const vector<vector<int>>& matrix, int cnt, int row, int col, int sum, vector<vector<bool>>& visit) {

	cnt++;
	if (cnt == 4) {
		max_value = max(max_value, sum);
		return;
	}


	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };


	for (int i = 0; i < 4; i++) {
		int nr = row + dr[i];
		int nc = col + dc[i];

		if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix[0].size() && !visit[nr][nc]) {
			visit[nr][nc] = true;
			dfs(matrix, cnt, nr, nc, sum + matrix[nr][nc], visit);
			visit[nr][nc] = false;
		}
	}
}


void t_shap(const vector<vector<int>>& matrix, int row, int col) {


	int dr1[3] = { -1, 0, 1 };
	int dc1[3] = { 0, 1, 0 };

	int dr2[3] = { -1, 0, 0 };
	int dc2[3] = { 0, 1, -1 };

	int dr3[3] = { -1, 1, 0 };
	int dc3[3] = { 0, 0, -1 };

	int dr4[3] = { 0, 1, 0 };
	int dc4[3] = { 1, 0, -1 };

	vector<int> row_arr;
	vector<int> col_arr;

	for (int i = 0; i < 3; i++) {
		row_arr.push_back(dr1[i]);
		col_arr.push_back(dc1[i]);
	}
	for (int i = 0; i < 3; i++) {
		row_arr.push_back(dr2[i]);
		col_arr.push_back(dc2[i]);
	}
	for (int i = 0; i < 3; i++) {
		row_arr.push_back(dr3[i]);
		col_arr.push_back(dc3[i]);
	}
	for (int i = 0; i < 3; i++) {
		row_arr.push_back(dr4[i]);
		col_arr.push_back(dc4[i]);
	}

	int sum = matrix[row][col];

	for (int i = 0; i < 12; i++) {
		int nr = row + row_arr[i];
		int nc = col + col_arr[i];


		if (nr >= 0 && nc >= 0 && nr < matrix.size() && nc < matrix[0].size()) {
			sum += matrix[nr][nc];

		}

		if ((i + 1) % 3 == 0) {
			max_value = max(max_value, sum);
			sum = matrix[row][col];
		}
	}
}





int main() {

	int n, m;
	cin >> n >> m;

	vector<vector<int>> matrix(n, vector<int>(m, 0));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> matrix[i][j];
		}
	}


	vector<vector<bool>> visit(n, vector<bool>(m, false));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {

			visit[i][j] = true;
			dfs(matrix, 0, i, j, matrix[i][j], visit);
			visit[i][j] = false;

			t_shap(matrix, i, j);
		}
	}

	cout << max_value;


	return 0;
}