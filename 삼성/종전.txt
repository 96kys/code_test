#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <queue>

using namespace std;


void sim(vector<vector<pair<int, int>>>& matrix);
void draw_square(vector<vector<pair<int, int>>>& matrix, int r, int c);
void draw_area(vector<vector<pair<int, int>>>& matrix);
int answer = 400 * 100;

void sim(vector<vector<pair<int, int>>>& matrix) {
	int map_size = (int)matrix.size();

	for (int row = 0; row < map_size; row++) {
		for (int col = 0; col < map_size; col++) {
			draw_square(matrix, row, col);
		}
	}
}




void draw_square(vector<vector<pair<int, int>>>& matrix, int r,int c) {
	int map_size = (int)matrix.size();

	// 우상 좌상 좌하 우하
	int dr[4] = { -1, -1, 1, 1 };
	int dc[4] = { 1, -1, -1, 1 };

	// 상 우 하 좌
	int dr_s[4] = { -1, 0, 1, 0 };
	int dc_s[4] = { 0, 1, 0 ,-1 };

	// 홀수의 이동 횟수 즉 1번 3번 대각선의 이동 횟수
	int step_odd = 1;

	// 짝수의 이동 횟수 즉 0번 2번 대각선의 이동 횟수
	int step_even = 1;

	int step_max_value = map_size - 2;

	vector<vector<pair<int, int>>> temp_matrix;

	
		for (step_odd = 1; step_odd <= step_max_value; step_odd++) {
			for (step_even = 1; step_even <= step_max_value; step_even++) {
				temp_matrix = matrix;

				int row = r;
				int col = c;

				// 0: 계속		1: 종료
				int break_flag = 0;

				for (int dir = 0; dir < 4; dir++) {
					if (dir % 2 == 0) {
						for (int step = 0; step < step_even; step++) {
							int nr = row + dr[dir];
							int nc = col + dc[dir];

							if (nr >= 0 && nc >= 0 && nr < map_size && nc < map_size) {
								temp_matrix[nr][nc].second = 1;
								row = nr;
								col = nc;
							}
							else {
								break_flag = 1;
								break;
							}

						}
					}
					else {
						for (int step = 0; step < step_odd; step++) {
							int nr = row + dr[dir];
							int nc = col + dc[dir];

							if (nr >= 0 && nc >= 0 && nr < map_size && nc < map_size) {
								temp_matrix[nr][nc].second = 1;
								row = nr;
								col = nc;
							}
							else {
								break_flag = 1;
								break;
							}
						}
					}
					if (break_flag == 1) {
						break;
					}
				}

				if (break_flag == 0) {
					//직사각형이 그려지는 경우

					bool draw_flag = false;
					int draw_start_index = 0;
					for (int row = 0; row < map_size; row++) {
						for (int col = 0; col < map_size; col++) {
							if (temp_matrix[row][col].second == 1 && draw_flag == 0) {
								draw_flag = true;
								draw_start_index = col;
							}
							else if (temp_matrix[row][col].second == 1 && draw_flag) {
								for (int start_draw = draw_start_index; start_draw < col; start_draw++) {
									temp_matrix[row][start_draw].second = 1;
								}
							}
						}
						draw_flag = false;
					}

					draw_area(temp_matrix);

					/*
					for (int i = 0; i < map_size; i++) {
						for (int j = 0; j < map_size; j++) {
							cout << temp_matrix[i][j].second << " ";
						}
						cout << endl;
					}
					cout << endl;
					*/

				}
			}
		}


}


void draw_area(vector<vector<pair<int, int>>>& matrix) {
	int map_size = (int)matrix.size();
	// 꼭지점 위치정보를 가진 변수  그려지는 순서인
	// 꼭지점 [아래쪽, 오른쪽, 위쪽, 오른쪽] 순서대로 저장
	vector<pair<int, int>> points(4, { 0,0 });

	bool stop_flag = false;
	for (int row = map_size - 1; row >= 0; row--) {
		for (int col = map_size - 1; col >= 0; col--) {
			if (matrix[row][col].second == 1) {
				points[0].first = row;
				points[0].second = col;
				stop_flag = true;
				break;
			}
		}
		if (stop_flag) {
			break;
		}
	}
	stop_flag = false;

	for (int col = map_size - 1; col >= 0; col--) {
		for (int row = map_size - 1; row >= 0; row--) {
			if (matrix[row][col].second == 1) {
				points[1].first = row;
				points[1].second = col;
				stop_flag = true;
				break;
			}
		}
		if (stop_flag) {
			break;
		}
	}
	stop_flag = false;

	for (int row = 0; row < map_size; row++) {
		for (int col = 0; col < map_size; col++) {
			if (matrix[row][col].second == 1) {
				points[2].first = row;
				points[2].second = col;
				stop_flag = true;
				break;
			}
		}
		if (stop_flag) {
			break;
		}
	}
	stop_flag = false;

	for (int col = 0; col < map_size; col++) {
		for (int row = 0; row < map_size; row++) {
			if (matrix[row][col].second == 1) {
				points[3].first = row;
				points[3].second = col;
				stop_flag = true;
				break;
			}
		}
		if (stop_flag) {
			break;
		}
	}
	stop_flag = false;

	/*
	cout << "points print" << endl;
	for (int i = 0; i < 4; i++) {
		cout<<"points: " << points[i].first << "  " << points[i].second << endl;
	}
	*/

	for (int row = 0; row < points[3].first; row++) {
		for (int col = 0; col <= points[2].second; col++) {
			if (matrix[row][col].second == 1) {
				break;
			}
			else {
				matrix[row][col].second = 2;
			}
		}
	}

	for (int col = points[2].second + 1; col < map_size; col++) {
		for (int row = 0; row <= points[1].first; row++) {
			if (matrix[row][col].second == 1) {
				break;
			}
			else {
				matrix[row][col].second = 3;
			}
		}
	}

	for (int col = 0; col < points[0].second; col++) {
		for (int row = map_size - 1; row >= points[3].first; row--) {

			if (matrix[row][col].second == 1) {
				break;
			}
			else {
				matrix[row][col].second = 4;
			}
		}
	}

	for (int row = map_size - 1; row > points[1].first; row--) {
		for (int col = map_size - 1; col >= points[0].second; col--) {

			if (matrix[row][col].second == 1) {
				break;
			}
			else {
				matrix[row][col].second = 5;
			}
		}
	}

	vector<int> human_cnt(5, 0);

	for (int row = 0; row < map_size; row++) {
		for (int col = 0; col < map_size; col++) {
			human_cnt[matrix[row][col].second - 1] += matrix[row][col].first;
		}
	}

	int max_value = human_cnt[0];
	int min_value = human_cnt[0];

	for (int i = 0; i < 5; i++) {
		max_value = max(max_value, human_cnt[i]);
		min_value = min(min_value, human_cnt[i]);
	}
	 
	answer = min(answer, max_value - min_value);

}


int main() {

	int n;
	cin >> n;

	// pair(해당 지역 인구, 통치하는 나라)
	vector<vector<pair<int, int>>> matrix(n, vector<pair<int, int>>(n, { 0,0 }));

	for (int row = 0; row < n; row++) {
		for (int col = 0; col < n; col++) {
			cin >> matrix[row][col].first;
		}
	}

	/*
	cout << endl;
	for (int row = 0; row < n; row++) {
		for (int col = 0; col < n; col++) {
			cout << matrix[row][col].first << " ";
		}
		cout << endl;
	}
	cout << endl;
	*/

	sim(matrix);

	cout << answer;


	return 0;
}