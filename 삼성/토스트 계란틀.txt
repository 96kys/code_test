#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

bool bfs(vector<vector<int>> &matrix, int n, int L, int R) {
    vector<vector<int>> init_matrix = matrix;
    int dr[4] = {-1, 0, 1, 0};
    int dc[4] = { 0, 1, 0, -1 };
    int same_index = 0;
    vector<vector<int>> same(n, vector<int>(n, 0));
    vector<vector<bool>> visit(n, vector<bool>(n, false));
    queue<pair<int, int>> q;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (!visit[i][j]) {
                q.push({ i, j });
                visit[i][j] = true;
                same_index++;
                same[i][j] = same_index;
                int sum_eggs = matrix[i][j];
                int num_cells = 1;
                vector<pair<int, int>> cells = {{i, j}};

                while (!q.empty()) {
                    pair<int, int> location = q.front();
                    int egg_value = matrix[location.first][location.second];
                    q.pop();

                    for (int dir = 0; dir < 4; dir++) {
                        int nr = location.first + dr[dir];
                        int nc = location.second + dc[dir];

                        if (nr >= 0 && nc >= 0 && nr < n && nc < n && !visit[nr][nc]) {
                            int diff = abs(matrix[nr][nc] - egg_value);
                            if (diff >= L && diff <= R) {
                                visit[nr][nc] = true;
                                q.push({ nr, nc });
                                same[nr][nc] = same_index;
                                sum_eggs += matrix[nr][nc];
                                num_cells++;
                                cells.push_back({nr, nc});
                            }
                        }
                    }
                }

                int average_eggs = sum_eggs / num_cells;
                for (auto &cell : cells) {
                    matrix[cell.first][cell.second] = average_eggs;
                }
            }
        }
    }

    return matrix != init_matrix;
}

int main() {
    int n, L, R;
    cin >> n >> L >> R;

    vector<vector<int>> matrix(n, vector<int>(n, 0));

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];            
        }
    }

    int move_cnt = 0;

    while (true) {
        if (!bfs(matrix, n, L, R)) {
            break;
        }
        move_cnt++;
    }
    
    cout << move_cnt;

    return 0;
}
