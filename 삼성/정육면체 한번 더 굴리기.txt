#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<algorithm>
#include<queue>

using namespace std;


int n;
int total_score;

void sim(vector<pair<int, string>>& dice, vector<vector<int>>& matrix, int& dice_under_num, int& dice_dir, pair<int, int>& dice_location);
void dice_move(int& dice_dir, pair<int, int>& dice_location);
void refresh_dice(vector<pair<int, string>>& dice, const int& dice_dir, int& dice_under_num);
bool can_go(int nr, int nc);
void refresh_dice_dir(vector<vector<int>>& matrix, vector<pair<int, string>>& dice, int& dice_under_num, int& dice_dir, pair<int, int>& dice_location);
void cal_score(vector<pair<int, string>>& dice, vector<vector<int>>& matrix, int& dice_dir, pair<int, int>& dice_location);

void sim(vector<pair<int, string>>& dice, vector<vector<int>>& matrix, int& dice_under_num, int& dice_dir, pair<int, int>& dice_location) {
	// 방향과 현재위치를 기준으로 이동
	dice_move(dice_dir, dice_location);
	//cout << "주사위 이동 위치:  " << dice_location.first << "   " << dice_location.second << endl;
	
	// 이동한 방향을 기준으로 숫자 위치 정보 갱신 및 아래에 있는 주사위 값 갱신
	refresh_dice(dice, dice_dir, dice_under_num);
	/*
	for (int i = 0; i < dice.size(); i++) {
		cout << "주사위의 숫자 및 주사위 내의 위치: " << dice[i].first << "  " << dice[i].second << endl;
	}
	*/
	// 이동 한 후 해당 위치의 타일 값을 기준으로 점수 계산
	cal_score(dice, matrix, dice_dir, dice_location);
	//cout << "총합 점수:" << total_score << endl;

	//cout << "기존 방향: " << dice_dir << endl;
	// 이동한 위치에서 타일값을 기준으로 이동 방향 전환
	refresh_dice_dir(matrix, dice, dice_under_num, dice_dir, dice_location);
	//cout << "변경 방향: " << dice_dir << endl;
	//cout << endl;
}

void dice_move(int& dice_dir, pair<int, int>& dice_location) {
	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };

	int row = dice_location.first;
	int col = dice_location.second;

	int nr = row + dr[dice_dir];
	int nc = col + dc[dice_dir];

	if (can_go(nr, nc)) {
		dice_location.first = nr;
		dice_location.second = nc;
	}
	else {
		dice_dir = (dice_dir + 2) % 4;
		dice_location.first = row + dr[dice_dir];
		dice_location.second = col + dc[dice_dir];
	}
	
}

void refresh_dice(vector<pair<int, string>>& dice, const int& dice_dir, int& dice_under_num) {
	// 상 우 하 좌

	if (dice_dir == 0) {
		for (int i = 0; i < dice.size(); i++) {
			if (dice[i].second == "top") {
				dice[i].second = "back";
			}
			else if (dice[i].second == "front") {
				dice[i].second = "top";
			}
			else if (dice[i].second == "back") {
				dice[i].second = "under";
			}
			else if (dice[i].second == "under") {
				dice[i].second = "front";
			}
		}
	}
	else if (dice_dir == 1) {
		for (int i = 0; i < dice.size(); i++) {
			if (dice[i].second == "top") {
				dice[i].second = "right";
			}
			else if (dice[i].second == "right") {
				dice[i].second = "under";
			}
			else if (dice[i].second == "left") {
				dice[i].second = "top";
			}
			else if (dice[i].second == "under") {
				dice[i].second = "left";
			}
		}
	}
	else if (dice_dir == 2) {
		for (int i = 0; i < dice.size(); i++) {
			if (dice[i].second == "top") {
				dice[i].second = "front";
			}
			else if (dice[i].second == "front") {
				dice[i].second = "under";
			}
			else if (dice[i].second == "back") {
				dice[i].second = "top";
			}
			else if (dice[i].second == "under") {
				dice[i].second = "back";
			}
		}
	}
	else if (dice_dir == 3) {
		for (int i = 0; i < dice.size(); i++) {
			if (dice[i].second == "top") {
				dice[i].second = "left";
			}
			else if (dice[i].second == "right") {
				dice[i].second = "top";
			}
			else if (dice[i].second == "left") {
				dice[i].second = "under";
			}
			else if (dice[i].second == "under") {
				dice[i].second = "right";
			}
		}
	}


	for (int i = 0; i < dice.size(); i++) {		
		if (dice[i].second == "under") {
			dice_under_num = dice[i].first;
			break;
		}
	}

}

void refresh_dice_dir(vector<vector<int>>& matrix, vector<pair<int, string>>& dice, int& dice_under_num, int& dice_dir, pair<int, int>& dice_location) {
	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };

	int row = dice_location.first;
	int col = dice_location.second;
	int number = matrix[row][col];

	if (number < dice_under_num) {
		// 큰 경우  시계방향으로 회전
		dice_dir = (dice_dir + 1) % 4;
	}
	else if (number > dice_under_num) {
		// 작은 경우 반시계 방향으로 회전
		dice_dir = (dice_dir - 1 + 4) % 4;
	}
	else {
		// 같은 경우 변경없이 진행
	}

}

void cal_score(vector<pair<int, string>>& dice, vector<vector<int>>& matrix, int& dice_dir, pair<int, int>& dice_location) {
	int score = 0;

	// 상 우 하 좌
	int dr[4] = { -1, 0, 1, 0 };
	int dc[4] = { 0, 1, 0, -1 };

	vector<vector<bool>> visit(n + 1, vector<bool>(n + 1, true));

	int r = dice_location.first;
	int c = dice_location.second;

	int score_num = matrix[r][c];

	queue<pair<int, int>> q;
	q.push({ r, c });
	visit[r][c] = false;
	score += score_num;

	while (!q.empty()) {
		int row = q.front().first;
		int col = q.front().second;
		q.pop();

		for (int dir = 0; dir < 4; dir++) {
			int nr = row + dr[dir];
			int nc = col + dc[dir];

			if (can_go(nr, nc) && visit[nr][nc] && matrix[nr][nc] == score_num) {
				q.push({ nr, nc });
				visit[nr][nc] = false;
				score += score_num;
			}
		}
	}

	total_score += score;
}

bool can_go(int nr, int nc) {
	// 격자 범위 내인가?
	if (nr >= 1 && nc >= 1 && nr <= n && nc <= n) {
		return true;
	}
	return false;
}


int main() {

	int m;
	cin >> n >> m;
	
	vector<pair<int, string>> dice(6, {0, ""});
	vector<vector<int>> matrix(n + 1, vector<int>(n + 1, 0));

	for (int row = 1; row <= n; row++) {
		for (int col = 1; col <= n; col++) {
			cin >> matrix[row][col];
		}
	}

	dice[0] = { 1, "top" };
	dice[1] = { 2, "front" };
	dice[2] = { 3, "right" };
	dice[3] = { 4, "left" };
	dice[4] = { 5, "back" };
	dice[5] = { 6, "under" };
	int dice_under_num = 6;

	// 상 우 좌 하(0, 1, 2, 3)
	int dice_dir = 1;
	pair<int, int>dice_location = { 1, 1 };

	for (int i = 0; i < m; i++) {
		sim(dice, matrix, dice_under_num, dice_dir, dice_location);
	}
	
	/*
	cout << endl;
	for (int row = 1; row <= n; row++) {
		for (int col = 1; col <= n; col++) {
			cout <<  matrix[row][col] << " ";
		}
		cout << endl;
	}
	cout << endl;
	*/


	cout << total_score << endl;

	return 0;
}
