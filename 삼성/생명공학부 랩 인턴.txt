#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int n, m, k;
int total_mold = 0;


void sim(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info);
void mold_find(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info, int col);
void mold_move(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info);

void sim(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info) {

	for (int col = 1; col <= m; col++) {
		mold_find(matrix, mold_info, col);
		mold_move(matrix, mold_info);

		//cout << "turn end" << endl;
	}


}

void mold_find(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info, int col) {

	for (int row = 1; row <= n; row++) {
		if (matrix[row][col].size() != 0) {
			int index = matrix[row][col][0];
			//cout << " row:  " << row << "     col :  " << col << endl;
			// 곰팡이 채집
			total_mold += mold_info[index][4];
			//cout << "곰팡이 채집: " << mold_info[index][4] << endl;
			// 제거
			matrix[row][col].clear();
			mold_info[index][0] = 0;
			mold_info[index][1] = 0;
			mold_info[index][2] = 0;
			mold_info[index][3] = 0;
			mold_info[index][4] = 0;

			break;
		}
	}
}

void mold_move(vector<vector<vector<int>>>& matrix, vector<vector<int>>& mold_info) {
	
	vector<vector<vector<int>>> temp_matrix(n + 1, vector<vector<int>>(m + 1));

	// 가만히 위쪽 아래쪽 오른쪽 왼쪽 (가만히가 있는 이유는 제공되는 dir정보는 1부터 시작하기 때문에)
	int dr[5] = {0, -1, 1, 0, 0 };
	int dc[5] = {0, 0, 0, 1, -1 };


	for (int row = 1; row <= n; row++) {
		for (int col = 1; col <= m; col++) {
			if (matrix[row][col].size() != 0) {
				// 해당 row col 위치에 곰팡이가 있다면 이동
				int index = matrix[row][col][0];

				int step = mold_info[index][2];
				int dir = mold_info[index][3];
				int mold_size = mold_info[index][4];

				for (int i = 0; i < step; i++) {

					int r = mold_info[index][0];
					int c = mold_info[index][1];

					int nr = r + dr[dir];
					int nc = c + dc[dir];

					if (nr >= 1 && nc >= 1 && nr <= n && nc <= m) {
						// 격자 안에서 이동하는 경우

						//이동
						mold_info[index][0] = nr;
						mold_info[index][1] = nc;
					}
					else {
						// 격자 밖에 이동하는 경우

						// 방향전환
						if (dir % 2 == 0) {
							dir--;
						}
						else {
							dir++;
						}

						// 전환된 방향으로 이동
						nr = r + dr[dir];
						nc = c + dc[dir];

						// 전환된 방향 곰팡이 정보에 저장
						mold_info[index][3] = dir;

						//이동
						mold_info[index][0] = nr;
						mold_info[index][1] = nc;
					}
				}
				temp_matrix[mold_info[index][0]][mold_info[index][1]].push_back(index);
			}
		}
	}


	
	for (int row = 1; row <= n; row++) {
		for (int col = 1; col <= m; col++) {
			if (temp_matrix[row][col].size() > 1) {
				int max_mold = 0;
				int max_index = 0;
				
				for (int i = 0; i < temp_matrix[row][col].size(); i++) {
					int index = temp_matrix[row][col][i];

					if (mold_info[index][4] > max_mold) {
						max_mold = mold_info[index][4];
						max_index = index;
					}
				}

				temp_matrix[row][col].clear();
				temp_matrix[row][col].push_back(max_index);
			}
		}
	}


	/*
	cout << endl;
	for (int row = 1; row <= n; row++) {
		for (int col = 1; col <= m; col++) {
			cout << temp_matrix[row][col].size() << " ";
		}
		cout << endl;
	}
	cout << endl;
	*/

	matrix = temp_matrix;
}



int main() {

	
	cin >> n >> m >> k;

	vector<vector<vector<int>>> matrix(n + 1, vector<vector<int>>(m + 1));

	vector<vector<int>> mold_info;
	for (int i = 0; i < k; i++) {
		vector<int> temp(5, 0);
		cin >> temp[0] >> temp[1] >> temp[2] >> temp[3] >> temp[4];
		mold_info.push_back(temp);

		// 2차원 배열에 곰팡이 인덱스 저장
		matrix[temp[0]][temp[1]].push_back(i);
	}
	
	sim(matrix, mold_info);


	cout << total_mold;

	return 0;
}